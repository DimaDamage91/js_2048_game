{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.currentCount = 0;\n        this.firstMoveMade = false;\n        if (initialState) this.state = initialState;\n        else {\n            this.state = [];\n            for(var i = 0; i < 4; i++){\n                var row = [];\n                for(var j = 0; j < 4; j++)row.push(0);\n                this.state.push(row);\n            }\n        }\n        this.score = 0;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"calculateScore\",\n            value: function calculateScore() {\n                this.score = 0;\n                for(var i = 0; i < this.state.length; i++){\n                    for(var j = 0; j < this.state[i].length; j++)if (this.state[i][j] !== 2) this.score += this.state[i][j];\n                }\n            }\n        },\n        {\n            key: \"canMerge\",\n            value: function canMerge() {\n                for(var i = 0; i < this.state.length; i++){\n                    for(var j = 0; j < this.state[i].length; j++)if (this.state[i][j] !== 0) {\n                        if (j > 0 && (this.state[i][j - 1] === this.state[i][j] || this.state[i][j - 1] === 0) || j < 3 && (this.state[i][j + 1] === this.state[i][j] || this.state[i][j + 1] === 0) || i > 0 && (this.state[i - 1][j] === this.state[i][j] || this.state[i - 1][j] === 0) || i < 3 && (this.state[i + 1][j] === this.state[i][j] || this.state[i + 1][j] === 0)) return true;\n                    }\n                }\n                return false;\n            }\n        },\n        {\n            key: \"generateNewTile\",\n            value: function generateNewTile() {\n                var emptyCells = [];\n                for(var i = 0; i < this.state.length; i++){\n                    for(var j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCells.push({\n                        i: i,\n                        j: j\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n                    this.state[randomCell.i][randomCell.j] = Math.random() < 0.1 ? 4 : 2;\n                }\n            }\n        },\n        {\n            key: \"updateGameField\",\n            value: function updateGameField() {\n                var _this = this;\n                var cells = document.querySelectorAll(\".field-cell\");\n                cells.forEach(function(cell, index) {\n                    var row = Math.floor(index / 4);\n                    var col = index % 4;\n                    var value = _this.getState()[row][col];\n                    cell.textContent = value !== 0 ? value : \"\";\n                    cell.className = \"field-cell\";\n                    if (value) cell.classList.add(\"field-cell--\".concat(value));\n                });\n                var gameStatus = this.getStatus();\n                if (gameStatus === \"Win\") document.querySelector(\".message-win\").classList.remove(\"hidden\");\n                else if (gameStatus === \"Loose\") document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n                this.calculateScore();\n                document.querySelector(\".game-score\").textContent = this.score;\n            }\n        },\n        {\n            key: \"addEventListeners\",\n            value: function addEventListeners() {\n                var _this = this;\n                document.addEventListener(\"keydown\", function(e) {\n                    if ([\n                        \"ArrowLeft\",\n                        \"ArrowRight\",\n                        \"ArrowUp\",\n                        \"ArrowDown\"\n                    ].includes(e.key)) {\n                        switch(e.key){\n                            case \"ArrowLeft\":\n                                _this.moveLeft();\n                                break;\n                            case \"ArrowRight\":\n                                _this.moveRight();\n                                break;\n                            case \"ArrowUp\":\n                                _this.moveUp();\n                                break;\n                            case \"ArrowDown\":\n                                _this.moveDown();\n                                break;\n                        }\n                        _this.updateGameField();\n                    }\n                });\n                document.querySelector(\".start\").addEventListener(\"click\", function() {\n                    _this.start();\n                    _this.generateNewTile();\n                    _this.generateNewTile();\n                    _this.updateGameField();\n                    document.querySelector(\".message-start\").classList.add(\"hidden\");\n                });\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(i) {\n                    var leftRow = _this.state[i];\n                    var newLeftRow = leftRow.filter(function(value) {\n                        return value !== 0;\n                    });\n                    for(var j = 0; j < newLeftRow.length - 1; j++)if (newLeftRow[j] === newLeftRow[j + 1]) {\n                        newLeftRow[j] *= 2;\n                        newLeftRow.splice(j + 1, 1);\n                        _this.currentCount += newLeftRow[j];\n                    }\n                    while(newLeftRow.length < leftRow.length)newLeftRow.push(0);\n                    newLeftResult.push(newLeftRow);\n                };\n                var prevState = JSON.stringify(this.state);\n                var newLeftResult = [];\n                for(var i = 0; i < this.state.length; i++)_loop(i);\n                this.state = newLeftResult;\n                if (prevState !== JSON.stringify(this.state)) this.generateNewTile();\n                if (!this.firstMoveMade) {\n                    document.querySelector(\".message-start\").classList.add(\"hidden\");\n                    this.firstMoveMade = true;\n                    document.querySelector(\".start\").textContent = \"Restart\";\n                    document.querySelector(\".start\").style.background = \"red\";\n                }\n                this.updateGameField();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(i) {\n                    var rightRow = (0, $227c6742e0ff6f82$export$71511d61b312f219)(_this.state[i]).reverse();\n                    var newRightRow = rightRow.filter(function(value) {\n                        return value !== 0;\n                    });\n                    for(var j = 0; j < newRightRow.length - 1; j++)if (newRightRow[j] === newRightRow[j + 1]) {\n                        newRightRow[j] *= 2;\n                        newRightRow.splice(j + 1, 1);\n                        _this.currentCount += newRightRow[j];\n                    }\n                    while(newRightRow.length < rightRow.length)newRightRow.push(0);\n                    newRightResult.push(newRightRow.reverse());\n                };\n                var prevState = JSON.stringify(this.state);\n                var newRightResult = [];\n                for(var i = 0; i < this.state.length; i++)_loop(i);\n                this.state = newRightResult;\n                if (prevState !== JSON.stringify(this.state)) this.generateNewTile();\n                if (!this.firstMoveMade) {\n                    document.querySelector(\".message-start\").classList.add(\"hidden\");\n                    this.firstMoveMade = true;\n                    document.querySelector(\".start\").textContent = \"Restart\";\n                    document.querySelector(\".start\").style.background = \"red\";\n                }\n                this.updateGameField();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var prevState = JSON.stringify(this.state);\n                for(var j = 0; j < this.state.length; j++){\n                    var newUpCol = [];\n                    for(var i = 0; i < this.state.length; i++)if (this.state[i][j] !== 0) newUpCol.push(this.state[i][j]);\n                    for(var i1 = 0; i1 < newUpCol.length; i1++)if (newUpCol[i1] === newUpCol[i1 + 1]) {\n                        newUpCol[i1] *= 2;\n                        newUpCol.splice(i1 + 1, 1);\n                        this.currentCount += newUpCol[i1];\n                    }\n                    while(newUpCol.length < this.state.length)newUpCol.push(0);\n                    for(var i2 = 0; i2 < this.state.length; i2++)this.state[i2][j] = newUpCol[i2];\n                }\n                if (prevState !== JSON.stringify(this.state)) this.generateNewTile();\n                if (!this.firstMoveMade) {\n                    document.querySelector(\".message-start\").classList.add(\"hidden\");\n                    this.firstMoveMade = true;\n                    document.querySelector(\".start\").textContent = \"Restart\";\n                    document.querySelector(\".start\").style.background = \"red\";\n                }\n                this.updateGameField();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var prevState = JSON.stringify(this.state);\n                for(var j = 0; j < this.state.length; j++){\n                    var newDownCol = [];\n                    for(var i = this.state.length - 1; i >= 0; i--)if (this.state[i][j] !== 0) newDownCol.push(this.state[i][j]);\n                    for(var i1 = 0; i1 < newDownCol.length - 1; i1++)if (newDownCol[i1] === newDownCol[i1 + 1]) {\n                        newDownCol[i1] *= 2;\n                        newDownCol.splice(i1 + 1, 1);\n                        this.currentCount += newDownCol[i1];\n                    }\n                    while(newDownCol.length < this.state.length)newDownCol.push(0);\n                    for(var i2 = 0; i2 < this.state.length; i2++)this.state[this.state.length - 1 - i2][j] = newDownCol[i2];\n                }\n                if (prevState !== JSON.stringify(this.state)) this.generateNewTile();\n                if (!this.firstMoveMade) {\n                    document.querySelector(\".message-start\").classList.add(\"hidden\");\n                    this.firstMoveMade = true;\n                    document.querySelector(\".start\").textContent = \"Restart\";\n                    document.querySelector(\".start\").style.background = \"red\";\n                }\n                this.updateGameField();\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.currentCount;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                var hasEmptyCell = false;\n                for(var i = 0; i < this.state.length; i++)for(var j = 0; j < this.state[i].length; j++){\n                    if (this.state[i][j] === 2048) return \"Win\";\n                    if (this.state[i][j] === 0) hasEmptyCell = true;\n                }\n                if (!hasEmptyCell && !this.canMerge()) return \"Loose\";\n                return \"The game continuous\";\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.currentCount = 0;\n                this.firstMoveMade = false;\n                this.state = Array.from({\n                    length: 4\n                }, function() {\n                    return Array(4).fill(0);\n                });\n                this.updateGameField();\n                document.querySelector(\".message-lose\").classList.add(\"hidden\");\n                document.querySelector(\".message-win\").classList.add(\"hidden\");\n                document.querySelector(\".start\").textContent = \"Start\";\n                document.querySelector(\".start\").style.background = \"green\";\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.start();\n                document.querySelector(\".message-start\").classList.remove(\"hidden\");\n                document.querySelector(\".start\").textContent = \"Start\";\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n$197cd56b15c33885$var$game.addEventListeners();\n$197cd56b15c33885$var$game.start();\n\n})();\n//# sourceMappingURL=index.bf298154.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ngame.addEventListeners();\ngame.start();\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.currentCount = 0;\n    this.firstMoveMade = false;\n\n    if (initialState) {\n      this.state = initialState;\n    } else {\n      this.state = [];\n\n      for (let i = 0; i < 4; i++) {\n        const row = [];\n\n        for (let j = 0; j < 4; j++) {\n          row.push(0);\n        }\n        this.state.push(row);\n      }\n    }\n\n    this.score = 0;\n  }\n\n  calculateScore() {\n    this.score = 0;\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] !== 2) {\n          this.score += this.state[i][j];\n        }\n      }\n    }\n  }\n\n  canMerge() {\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] !== 0) {\n          if (\n            (j > 0 &&\n              (this.state[i][j - 1] === this.state[i][j] ||\n                this.state[i][j - 1] === 0)) ||\n            (j < 3 &&\n              (this.state[i][j + 1] === this.state[i][j] ||\n                this.state[i][j + 1] === 0)) ||\n            (i > 0 &&\n              (this.state[i - 1][j] === this.state[i][j] ||\n                this.state[i - 1][j] === 0)) ||\n            (i < 3 &&\n              (this.state[i + 1][j] === this.state[i][j] ||\n                this.state[i + 1][j] === 0))\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  generateNewTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push({ i, j });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomCell =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.state[randomCell.i][randomCell.j] = Math.random() < 0.1 ? 4 : 2;\n    }\n  }\n\n  updateGameField() {\n    const cells = document.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, index) => {\n      const row = Math.floor(index / 4);\n      const col = index % 4;\n      const value = this.getState()[row][col];\n\n      cell.textContent = value !== 0 ? value : '';\n      cell.className = 'field-cell';\n\n      if (value) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n    });\n\n    const gameStatus = this.getStatus();\n\n    if (gameStatus === 'Win') {\n      document.querySelector('.message-win').classList.remove('hidden');\n    } else if (gameStatus === 'Loose') {\n      document.querySelector('.message-lose').classList.remove('hidden');\n    }\n\n    this.calculateScore();\n    document.querySelector('.game-score').textContent = this.score;\n  }\n\n  addEventListeners() {\n    document.addEventListener('keydown', (e) => {\n      if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {\n        switch (e.key) {\n          case 'ArrowLeft':\n            this.moveLeft();\n            break;\n          case 'ArrowRight':\n            this.moveRight();\n            break;\n          case 'ArrowUp':\n            this.moveUp();\n            break;\n          case 'ArrowDown':\n            this.moveDown();\n            break;\n        }\n        this.updateGameField();\n      }\n    });\n\n    document.querySelector('.start').addEventListener('click', () => {\n      this.start();\n      this.generateNewTile();\n      this.generateNewTile();\n      this.updateGameField();\n      document.querySelector('.message-start').classList.add('hidden');\n    });\n  }\n\n  moveLeft() {\n    const prevState = JSON.stringify(this.state);\n\n    const newLeftResult = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      const leftRow = this.state[i];\n      const newLeftRow = leftRow.filter((value) => value !== 0);\n\n      for (let j = 0; j < newLeftRow.length - 1; j++) {\n        if (newLeftRow[j] === newLeftRow[j + 1]) {\n          newLeftRow[j] *= 2;\n          newLeftRow.splice(j + 1, 1);\n          this.currentCount += newLeftRow[j];\n        }\n      }\n\n      while (newLeftRow.length < leftRow.length) {\n        newLeftRow.push(0);\n      }\n\n      newLeftResult.push(newLeftRow);\n    }\n\n    this.state = newLeftResult;\n\n    if (prevState !== JSON.stringify(this.state)) {\n      this.generateNewTile();\n    }\n\n    if (!this.firstMoveMade) {\n      document.querySelector('.message-start').classList.add('hidden');\n      this.firstMoveMade = true;\n      document.querySelector('.start').textContent = 'Restart';\n      document.querySelector('.start').style.background = 'red';\n    }\n\n    this.updateGameField();\n  }\n\n  moveRight() {\n    const prevState = JSON.stringify(this.state);\n\n    const newRightResult = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      const rightRow = [...this.state[i]].reverse();\n      const newRightRow = rightRow.filter((value) => value !== 0);\n\n      for (let j = 0; j < newRightRow.length - 1; j++) {\n        if (newRightRow[j] === newRightRow[j + 1]) {\n          newRightRow[j] *= 2;\n          newRightRow.splice(j + 1, 1);\n          this.currentCount += newRightRow[j];\n        }\n      }\n\n      while (newRightRow.length < rightRow.length) {\n        newRightRow.push(0);\n      }\n\n      newRightResult.push(newRightRow.reverse());\n    }\n\n    this.state = newRightResult;\n\n    if (prevState !== JSON.stringify(this.state)) {\n      this.generateNewTile();\n    }\n\n    if (!this.firstMoveMade) {\n      document.querySelector('.message-start').classList.add('hidden');\n      this.firstMoveMade = true;\n      document.querySelector('.start').textContent = 'Restart';\n      document.querySelector('.start').style.background = 'red';\n    }\n\n    this.updateGameField();\n  }\n\n  moveUp() {\n    const prevState = JSON.stringify(this.state);\n\n    for (let j = 0; j < this.state.length; j++) {\n      const newUpCol = [];\n\n      for (let i = 0; i < this.state.length; i++) {\n        if (this.state[i][j] !== 0) {\n          newUpCol.push(this.state[i][j]);\n        }\n      }\n\n      for (let i = 0; i < newUpCol.length; i++) {\n        if (newUpCol[i] === newUpCol[i + 1]) {\n          newUpCol[i] *= 2;\n          newUpCol.splice(i + 1, 1);\n          this.currentCount += newUpCol[i];\n        }\n      }\n\n      while (newUpCol.length < this.state.length) {\n        newUpCol.push(0);\n      }\n\n      for (let i = 0; i < this.state.length; i++) {\n        this.state[i][j] = newUpCol[i];\n      }\n    }\n\n    if (prevState !== JSON.stringify(this.state)) {\n      this.generateNewTile();\n    }\n\n    if (!this.firstMoveMade) {\n      document.querySelector('.message-start').classList.add('hidden');\n      this.firstMoveMade = true;\n      document.querySelector('.start').textContent = 'Restart';\n      document.querySelector('.start').style.background = 'red';\n    }\n\n    this.updateGameField();\n  }\n\n  moveDown() {\n    const prevState = JSON.stringify(this.state);\n\n    for (let j = 0; j < this.state.length; j++) {\n      const newDownCol = [];\n\n      for (let i = this.state.length - 1; i >= 0; i--) {\n        if (this.state[i][j] !== 0) {\n          newDownCol.push(this.state[i][j]);\n        }\n      }\n\n      for (let i = 0; i < newDownCol.length - 1; i++) {\n        if (newDownCol[i] === newDownCol[i + 1]) {\n          newDownCol[i] *= 2;\n          newDownCol.splice(i + 1, 1);\n          this.currentCount += newDownCol[i];\n        }\n      }\n\n      while (newDownCol.length < this.state.length) {\n        newDownCol.push(0);\n      }\n\n      for (let i = 0; i < this.state.length; i++) {\n        this.state[this.state.length - 1 - i][j] = newDownCol[i];\n      }\n    }\n\n    if (prevState !== JSON.stringify(this.state)) {\n      this.generateNewTile();\n    }\n\n    if (!this.firstMoveMade) {\n      document.querySelector('.message-start').classList.add('hidden');\n      this.firstMoveMade = true;\n      document.querySelector('.start').textContent = 'Restart';\n      document.querySelector('.start').style.background = 'red';\n    }\n\n    this.updateGameField();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.currentCount;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    let hasEmptyCell = false;\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 2048) {\n          return 'Win';\n        }\n\n        if (this.state[i][j] === 0) {\n          hasEmptyCell = true;\n        }\n      }\n    }\n\n    if (!hasEmptyCell && !this.canMerge()) {\n      return 'Loose';\n    }\n\n    return 'The game continuous';\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.currentCount = 0;\n    this.firstMoveMade = false;\n    this.state = Array.from({ length: 4 }, () => Array(4).fill(0));\n    this.updateGameField();\n    document.querySelector('.message-lose').classList.add('hidden');\n    document.querySelector('.message-win').classList.add('hidden');\n    document.querySelector('.start').textContent = 'Start';\n    document.querySelector('.start').style.background = 'green';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.start();\n    document.querySelector('.message-start').classList.remove('hidden');\n    document.querySelector('.start').textContent = 'Start';\n  }\n\n  // Add your own methods here\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","Constructor","TypeError","currentCount","firstMoveMade","state","row","j","push","score","key","value","emptyCells","randomCell","Math","floor","random","_this","cells","document","querySelectorAll","forEach","cell","index","getState","textContent","className","classList","add","concat","gameStatus","getStatus","querySelector","remove","calculateScore","addEventListener","e","includes","moveLeft","moveRight","moveUp","moveDown","updateGameField","start","generateNewTile","prevState","JSON","stringify","newLeftResult","_loop","leftRow","newLeftRow","filter","splice","style","background","newRightResult","rightRow","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","reverse","newRightRow","newUpCol","i1","i2","newDownCol","hasEmptyCell","canMerge","fill","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","addEventListeners"],"version":3,"file":"index.bf298154.js.map"}