{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.currentCount = 0;\n        this.firstMoveMade = false;\n        if (initialState) this.state = initialState;\n        else {\n            this.state = [];\n            for(let i = 0; i < 4; i++){\n                const row = [];\n                for(let j = 0; j < 4; j++)row.push(0);\n                this.state.push(row);\n            }\n        }\n        this.score = 0;\n    }\n    calculateScore() {\n        this.score = 0;\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] !== 2) this.score += this.state[i][j];\n        }\n    }\n    canMerge() {\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] !== 0) {\n                if (j > 0 && (this.state[i][j - 1] === this.state[i][j] || this.state[i][j - 1] === 0) || j < 3 && (this.state[i][j + 1] === this.state[i][j] || this.state[i][j + 1] === 0) || i > 0 && (this.state[i - 1][j] === this.state[i][j] || this.state[i - 1][j] === 0) || i < 3 && (this.state[i + 1][j] === this.state[i][j] || this.state[i + 1][j] === 0)) return true;\n            }\n        }\n        return false;\n    }\n    generateNewTile() {\n        const emptyCells = [];\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCells.push({\n                i: i,\n                j: j\n            });\n        }\n        if (emptyCells.length > 0) {\n            const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.state[randomCell.i][randomCell.j] = Math.random() < 0.1 ? 4 : 2;\n        }\n    }\n    updateGameField() {\n        const cells = document.querySelectorAll(\".field-cell\");\n        cells.forEach((cell, index)=>{\n            const row = Math.floor(index / 4);\n            const col = index % 4;\n            const value = this.getState()[row][col];\n            cell.textContent = value !== 0 ? value : \"\";\n            cell.className = \"field-cell\";\n            if (value) cell.classList.add(`field-cell--${value}`);\n        });\n        const gameStatus = this.getStatus();\n        if (gameStatus === \"Win\") document.querySelector(\".message-win\").classList.remove(\"hidden\");\n        else if (gameStatus === \"Loose\") document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n        this.calculateScore();\n        document.querySelector(\".game-score\").textContent = this.score;\n    }\n    addEventListeners() {\n        document.addEventListener(\"keydown\", (e)=>{\n            if ([\n                \"ArrowLeft\",\n                \"ArrowRight\",\n                \"ArrowUp\",\n                \"ArrowDown\"\n            ].includes(e.key)) {\n                switch(e.key){\n                    case \"ArrowLeft\":\n                        this.moveLeft();\n                        break;\n                    case \"ArrowRight\":\n                        this.moveRight();\n                        break;\n                    case \"ArrowUp\":\n                        this.moveUp();\n                        break;\n                    case \"ArrowDown\":\n                        this.moveDown();\n                        break;\n                }\n                this.updateGameField();\n            }\n        });\n        document.querySelector(\".start\").addEventListener(\"click\", ()=>{\n            this.start();\n            this.generateNewTile();\n            this.generateNewTile();\n            this.updateGameField();\n            document.querySelector(\".message-start\").classList.add(\"hidden\");\n        });\n    }\n    moveLeft() {\n        const prevState = JSON.stringify(this.state);\n        const newLeftResult = [];\n        for(let i = 0; i < this.state.length; i++){\n            const leftRow = this.state[i];\n            const newLeftRow = leftRow.filter((value)=>value !== 0);\n            for(let j = 0; j < newLeftRow.length - 1; j++)if (newLeftRow[j] === newLeftRow[j + 1]) {\n                newLeftRow[j] *= 2;\n                newLeftRow.splice(j + 1, 1);\n                this.currentCount += newLeftRow[j];\n            }\n            while(newLeftRow.length < leftRow.length)newLeftRow.push(0);\n            newLeftResult.push(newLeftRow);\n        }\n        this.state = newLeftResult;\n        if (prevState !== JSON.stringify(this.state)) this.generateNewTile();\n        if (!this.firstMoveMade) {\n            document.querySelector(\".message-start\").classList.add(\"hidden\");\n            this.firstMoveMade = true;\n            document.querySelector(\".start\").textContent = \"Restart\";\n            document.querySelector(\".start\").style.background = \"red\";\n        }\n        this.updateGameField();\n    }\n    moveRight() {\n        const prevState = JSON.stringify(this.state);\n        const newRightResult = [];\n        for(let i = 0; i < this.state.length; i++){\n            const rightRow = [\n                ...this.state[i]\n            ].reverse();\n            const newRightRow = rightRow.filter((value)=>value !== 0);\n            for(let j = 0; j < newRightRow.length - 1; j++)if (newRightRow[j] === newRightRow[j + 1]) {\n                newRightRow[j] *= 2;\n                newRightRow.splice(j + 1, 1);\n                this.currentCount += newRightRow[j];\n            }\n            while(newRightRow.length < rightRow.length)newRightRow.push(0);\n            newRightResult.push(newRightRow.reverse());\n        }\n        this.state = newRightResult;\n        if (prevState !== JSON.stringify(this.state)) this.generateNewTile();\n        if (!this.firstMoveMade) {\n            document.querySelector(\".message-start\").classList.add(\"hidden\");\n            this.firstMoveMade = true;\n            document.querySelector(\".start\").textContent = \"Restart\";\n            document.querySelector(\".start\").style.background = \"red\";\n        }\n        this.updateGameField();\n    }\n    moveUp() {\n        const prevState = JSON.stringify(this.state);\n        for(let j = 0; j < this.state.length; j++){\n            const newUpCol = [];\n            for(let i = 0; i < this.state.length; i++)if (this.state[i][j] !== 0) newUpCol.push(this.state[i][j]);\n            for(let i = 0; i < newUpCol.length; i++)if (newUpCol[i] === newUpCol[i + 1]) {\n                newUpCol[i] *= 2;\n                newUpCol.splice(i + 1, 1);\n                this.currentCount += newUpCol[i];\n            }\n            while(newUpCol.length < this.state.length)newUpCol.push(0);\n            for(let i = 0; i < this.state.length; i++)this.state[i][j] = newUpCol[i];\n        }\n        if (prevState !== JSON.stringify(this.state)) this.generateNewTile();\n        if (!this.firstMoveMade) {\n            document.querySelector(\".message-start\").classList.add(\"hidden\");\n            this.firstMoveMade = true;\n            document.querySelector(\".start\").textContent = \"Restart\";\n            document.querySelector(\".start\").style.background = \"red\";\n        }\n        this.updateGameField();\n    }\n    moveDown() {\n        const prevState = JSON.stringify(this.state);\n        for(let j = 0; j < this.state.length; j++){\n            const newDownCol = [];\n            for(let i = this.state.length - 1; i >= 0; i--)if (this.state[i][j] !== 0) newDownCol.push(this.state[i][j]);\n            for(let i = 0; i < newDownCol.length - 1; i++)if (newDownCol[i] === newDownCol[i + 1]) {\n                newDownCol[i] *= 2;\n                newDownCol.splice(i + 1, 1);\n                this.currentCount += newDownCol[i];\n            }\n            while(newDownCol.length < this.state.length)newDownCol.push(0);\n            for(let i = 0; i < this.state.length; i++)this.state[this.state.length - 1 - i][j] = newDownCol[i];\n        }\n        if (prevState !== JSON.stringify(this.state)) this.generateNewTile();\n        if (!this.firstMoveMade) {\n            document.querySelector(\".message-start\").classList.add(\"hidden\");\n            this.firstMoveMade = true;\n            document.querySelector(\".start\").textContent = \"Restart\";\n            document.querySelector(\".start\").style.background = \"red\";\n        }\n        this.updateGameField();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.currentCount;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        let hasEmptyCell = false;\n        for(let i = 0; i < this.state.length; i++)for(let j = 0; j < this.state[i].length; j++){\n            if (this.state[i][j] === 2048) return \"Win\";\n            if (this.state[i][j] === 0) hasEmptyCell = true;\n        }\n        if (!hasEmptyCell && !this.canMerge()) return \"Loose\";\n        return \"The game continuous\";\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.currentCount = 0;\n        this.firstMoveMade = false;\n        this.state = Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n        this.updateGameField();\n        document.querySelector(\".message-lose\").classList.add(\"hidden\");\n        document.querySelector(\".message-win\").classList.add(\"hidden\");\n        document.querySelector(\".start\").textContent = \"Start\";\n        document.querySelector(\".start\").style.background = \"green\";\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.start();\n        document.querySelector(\".message-start\").classList.remove(\"hidden\");\n        document.querySelector(\".start\").textContent = \"Start\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n$09e991522ca7e64e$var$game.addEventListeners();\n$09e991522ca7e64e$var$game.start();\n\n\n//# sourceMappingURL=index.7b2d041d.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ngame.addEventListeners();\ngame.start();\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.currentCount = 0;\n    this.firstMoveMade = false;\n\n    if (initialState) {\n      this.state = initialState;\n    } else {\n      this.state = [];\n\n      for (let i = 0; i < 4; i++) {\n        const row = [];\n\n        for (let j = 0; j < 4; j++) {\n          row.push(0);\n        }\n        this.state.push(row);\n      }\n    }\n\n    this.score = 0;\n  }\n\n  calculateScore() {\n    this.score = 0;\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] !== 2) {\n          this.score += this.state[i][j];\n        }\n      }\n    }\n  }\n\n  canMerge() {\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] !== 0) {\n          if (\n            (j > 0 &&\n              (this.state[i][j - 1] === this.state[i][j] ||\n                this.state[i][j - 1] === 0)) ||\n            (j < 3 &&\n              (this.state[i][j + 1] === this.state[i][j] ||\n                this.state[i][j + 1] === 0)) ||\n            (i > 0 &&\n              (this.state[i - 1][j] === this.state[i][j] ||\n                this.state[i - 1][j] === 0)) ||\n            (i < 3 &&\n              (this.state[i + 1][j] === this.state[i][j] ||\n                this.state[i + 1][j] === 0))\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  generateNewTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push({ i, j });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomCell =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.state[randomCell.i][randomCell.j] = Math.random() < 0.1 ? 4 : 2;\n    }\n  }\n\n  updateGameField() {\n    const cells = document.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, index) => {\n      const row = Math.floor(index / 4);\n      const col = index % 4;\n      const value = this.getState()[row][col];\n\n      cell.textContent = value !== 0 ? value : '';\n      cell.className = 'field-cell';\n\n      if (value) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n    });\n\n    const gameStatus = this.getStatus();\n\n    if (gameStatus === 'Win') {\n      document.querySelector('.message-win').classList.remove('hidden');\n    } else if (gameStatus === 'Loose') {\n      document.querySelector('.message-lose').classList.remove('hidden');\n    }\n\n    this.calculateScore();\n    document.querySelector('.game-score').textContent = this.score;\n  }\n\n  addEventListeners() {\n    document.addEventListener('keydown', (e) => {\n      if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {\n        switch (e.key) {\n          case 'ArrowLeft':\n            this.moveLeft();\n            break;\n          case 'ArrowRight':\n            this.moveRight();\n            break;\n          case 'ArrowUp':\n            this.moveUp();\n            break;\n          case 'ArrowDown':\n            this.moveDown();\n            break;\n        }\n        this.updateGameField();\n      }\n    });\n\n    document.querySelector('.start').addEventListener('click', () => {\n      this.start();\n      this.generateNewTile();\n      this.generateNewTile();\n      this.updateGameField();\n      document.querySelector('.message-start').classList.add('hidden');\n    });\n  }\n\n  moveLeft() {\n    const prevState = JSON.stringify(this.state);\n\n    const newLeftResult = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      const leftRow = this.state[i];\n      const newLeftRow = leftRow.filter((value) => value !== 0);\n\n      for (let j = 0; j < newLeftRow.length - 1; j++) {\n        if (newLeftRow[j] === newLeftRow[j + 1]) {\n          newLeftRow[j] *= 2;\n          newLeftRow.splice(j + 1, 1);\n          this.currentCount += newLeftRow[j];\n        }\n      }\n\n      while (newLeftRow.length < leftRow.length) {\n        newLeftRow.push(0);\n      }\n\n      newLeftResult.push(newLeftRow);\n    }\n\n    this.state = newLeftResult;\n\n    if (prevState !== JSON.stringify(this.state)) {\n      this.generateNewTile();\n    }\n\n    if (!this.firstMoveMade) {\n      document.querySelector('.message-start').classList.add('hidden');\n      this.firstMoveMade = true;\n      document.querySelector('.start').textContent = 'Restart';\n      document.querySelector('.start').style.background = 'red';\n    }\n\n    this.updateGameField();\n  }\n\n  moveRight() {\n    const prevState = JSON.stringify(this.state);\n\n    const newRightResult = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      const rightRow = [...this.state[i]].reverse();\n      const newRightRow = rightRow.filter((value) => value !== 0);\n\n      for (let j = 0; j < newRightRow.length - 1; j++) {\n        if (newRightRow[j] === newRightRow[j + 1]) {\n          newRightRow[j] *= 2;\n          newRightRow.splice(j + 1, 1);\n          this.currentCount += newRightRow[j];\n        }\n      }\n\n      while (newRightRow.length < rightRow.length) {\n        newRightRow.push(0);\n      }\n\n      newRightResult.push(newRightRow.reverse());\n    }\n\n    this.state = newRightResult;\n\n    if (prevState !== JSON.stringify(this.state)) {\n      this.generateNewTile();\n    }\n\n    if (!this.firstMoveMade) {\n      document.querySelector('.message-start').classList.add('hidden');\n      this.firstMoveMade = true;\n      document.querySelector('.start').textContent = 'Restart';\n      document.querySelector('.start').style.background = 'red';\n    }\n\n    this.updateGameField();\n  }\n\n  moveUp() {\n    const prevState = JSON.stringify(this.state);\n\n    for (let j = 0; j < this.state.length; j++) {\n      const newUpCol = [];\n\n      for (let i = 0; i < this.state.length; i++) {\n        if (this.state[i][j] !== 0) {\n          newUpCol.push(this.state[i][j]);\n        }\n      }\n\n      for (let i = 0; i < newUpCol.length; i++) {\n        if (newUpCol[i] === newUpCol[i + 1]) {\n          newUpCol[i] *= 2;\n          newUpCol.splice(i + 1, 1);\n          this.currentCount += newUpCol[i];\n        }\n      }\n\n      while (newUpCol.length < this.state.length) {\n        newUpCol.push(0);\n      }\n\n      for (let i = 0; i < this.state.length; i++) {\n        this.state[i][j] = newUpCol[i];\n      }\n    }\n\n    if (prevState !== JSON.stringify(this.state)) {\n      this.generateNewTile();\n    }\n\n    if (!this.firstMoveMade) {\n      document.querySelector('.message-start').classList.add('hidden');\n      this.firstMoveMade = true;\n      document.querySelector('.start').textContent = 'Restart';\n      document.querySelector('.start').style.background = 'red';\n    }\n\n    this.updateGameField();\n  }\n\n  moveDown() {\n    const prevState = JSON.stringify(this.state);\n\n    for (let j = 0; j < this.state.length; j++) {\n      const newDownCol = [];\n\n      for (let i = this.state.length - 1; i >= 0; i--) {\n        if (this.state[i][j] !== 0) {\n          newDownCol.push(this.state[i][j]);\n        }\n      }\n\n      for (let i = 0; i < newDownCol.length - 1; i++) {\n        if (newDownCol[i] === newDownCol[i + 1]) {\n          newDownCol[i] *= 2;\n          newDownCol.splice(i + 1, 1);\n          this.currentCount += newDownCol[i];\n        }\n      }\n\n      while (newDownCol.length < this.state.length) {\n        newDownCol.push(0);\n      }\n\n      for (let i = 0; i < this.state.length; i++) {\n        this.state[this.state.length - 1 - i][j] = newDownCol[i];\n      }\n    }\n\n    if (prevState !== JSON.stringify(this.state)) {\n      this.generateNewTile();\n    }\n\n    if (!this.firstMoveMade) {\n      document.querySelector('.message-start').classList.add('hidden');\n      this.firstMoveMade = true;\n      document.querySelector('.start').textContent = 'Restart';\n      document.querySelector('.start').style.background = 'red';\n    }\n\n    this.updateGameField();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.currentCount;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    let hasEmptyCell = false;\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 2048) {\n          return 'Win';\n        }\n\n        if (this.state[i][j] === 0) {\n          hasEmptyCell = true;\n        }\n      }\n    }\n\n    if (!hasEmptyCell && !this.canMerge()) {\n      return 'Loose';\n    }\n\n    return 'The game continuous';\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.currentCount = 0;\n    this.firstMoveMade = false;\n    this.state = Array.from({ length: 4 }, () => Array(4).fill(0));\n    this.updateGameField();\n    document.querySelector('.message-lose').classList.add('hidden');\n    document.querySelector('.message-win').classList.add('hidden');\n    document.querySelector('.start').textContent = 'Start';\n    document.querySelector('.start').style.background = 'green';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.start();\n    document.querySelector('.message-start').classList.remove('hidden');\n    document.querySelector('.start').textContent = 'Start';\n  }\n\n  // Add your own methods here\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","currentCount","firstMoveMade","state","i","row","j","push","score","calculateScore","length","canMerge","generateNewTile","emptyCells","randomCell","Math","floor","random","updateGameField","cells","document","querySelectorAll","forEach","cell","index","value","getState","textContent","className","classList","add","gameStatus","getStatus","querySelector","remove","addEventListeners","addEventListener","e","includes","key","moveLeft","moveRight","moveUp","moveDown","start","prevState","JSON","stringify","newLeftResult","leftRow","newLeftRow","filter","splice","style","background","newRightResult","rightRow","reverse","newRightRow","newUpCol","newDownCol","getScore","hasEmptyCell","Array","from","fill","restart"],"version":3,"file":"index.7b2d041d.js.map"}